import React from 'react'
import { useHistory } from 'react-router-dom'
import OnboardingSlide from './OnboardingSlide'
import { useMutation } from '@apollo/react-hooks'
import { CreateCampaign } from '../__generated__/CreateCampaign'
import { CREATE_CAMPAIGN, GET_CAMPAIGNS } from '../pages/CampaignsList'

const landingIllustration = require('../images/illustrations/landing.svg')
const propositionsIllustration = require('../images/illustrations/propositions.svg')
const performancesIllustration = require('../images/illustrations/performances.svg')

interface ISlidesState {
  step: 'intro' | 'slides'
  slide: number
}

const initialSlidesState: ISlidesState = {
  step: 'slides',
  slide: 0,
}

const slidesReducer = (
  state: ISlidesState,
  action: 'NEXT_SLIDE' | 'START_SLIDES'
): ISlidesState => {
  switch (action) {
    case 'START_SLIDES':
      return {
        step: 'slides',
        slide: 0,
      }
    case 'NEXT_SLIDE':
      return {
        ...state,
        slide: state.slide + 1,
      }
    default:
      return state
  }
}

const BrandOnboarding: React.FC<{}> = () => {
  const history = useHistory()
  const [createCampaign] = useMutation<CreateCampaign>(CREATE_CAMPAIGN, {
    onCompleted: ({ createCampaign: { _id } }) => {
      history.push(`/brand/campaigns/${_id}/brief`)
    },
    // Add created campaign to cache
    refetchQueries: [{ query: GET_CAMPAIGNS }],
  })
  // Store current status in state
  const [slidesState, slidesDispatch] = React.useReducer(slidesReducer, initialSlidesState)

  // Slides data
  const slides = [
    {
      title: 'Create your campaign',
      description:
        'Take 2 minutes to fill your campaign brief. It will be shown to more than 2k streamers.',
      buttonText: 'Next step',
      handleButtonClick: () => slidesDispatch('NEXT_SLIDE'),
      image: landingIllustration,
    },
    {
      title: 'Receive collab requests',
      description:
        'Receive requests from influencers who want to try your product. You can check their audience insights (country, age...) to choose the best profiles',
      buttonText: 'Next step',
      handleButtonClick: () => slidesDispatch('NEXT_SLIDE'),
      image: propositionsIllustration,
    },
    {
      title: 'Measure your performances',
      description:
        'Check the engagement generated by your campaigns (likes, comments, impressionsâ€¦)',
      buttonText: 'Create my campaign',
      handleButtonClick: () => createCampaign(),
      image: performancesIllustration,
    },
  ]

  // Onboarding slides
  return <OnboardingSlide {...slides[slidesState.slide]} index={slidesState.slide + 1} />
}

export default BrandOnboarding
